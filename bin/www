#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend-presentasee:server');
var http = require('http');
const mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log('Listening on http://localhost:'+port)

const server = http.createServer(app)
const io = require('socket.io')(server)

io.of('/api/socket').on('connection', (socket) => {
  console.log('socket.io: User connected', socket.id)

  socket.on('disconnect', ()=> {
    console.log('socket.io: User disconnected: ', socket.id)
  })
})

mongoose.connect(process.env.DB_URI || 'mongodb://localhost/presentasee', {
  useNewUrlParser: true,
  useCreateIndex: true,
  useUnifiedTopology: true,
  useFindAndModify: false,
});

const connection = mongoose.connection;

connection.once("open", () => {
  console.log("MongoDB database connected");

  console.log("Setting change streams");
  const roomChangeStream = connection.collection("RoomsModel").watch();
  const slideChangeStream = connection.collection("SlidesModel").watch();

  roomChangeStream.on("change", (change) => {
    switch (change.operationType) {
      case "join":
        const room = {
          _id: change.fullDocument._id,
          title: change.fullDocument.title,
          fileUrl: change.fullDocument.fileUrl,
          date: change.fullDocument.date,
          joinned: change.fullDocument.joinned,
        };

        io.of("/api/socket").emit("join", room);
        break;

      // case "delete":
      //   io.of("/api/socket").emit("deletedThought", change.documentKey._id);
      //   break;
    }
  });

  slideChangeStream.on("change", (change) => {
    switch (change.operationType) {
      case "like":
        const slide = {
          _id: change.fullDocument._id,
          RoomId: change.fullDocument.RoomId,
          fileUrl: change.fullDocument.fileUrl,
          likes: change.fullDocument.likes,
          questions: change.fullDocument.questions,
          people: change.fullDocument.people,
        };

        io.of("/api/socket").emit("addLike", );
        break;

      case "delete":
        io.of("/api/socket").emit("deletedThought", change.documentKey._id);
        break;
    }
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
